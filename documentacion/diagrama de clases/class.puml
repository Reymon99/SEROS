@startuml
title SEROS Class Diagram
package eventos #DDDDDD {
    abstract class Eventos {
        - {static} panel : JPanel
        --
        + {static} setPanel(panel: JPanel) : void
        + {static} show(panel : Paneles) : void
        + {static} link(url : String) :void
        + {static} about(component : Component) : void
        + {static} enable(enable : boolean, components : Component[]) : void
        + {static} scroll(panel : ModernScrollPane, value : int) : void
        + {static} variable(tree : Tree, index : int, valor : Object) : void
        + {static} sleep(mili : long) : void
        + {static} contains(valor : Object, objects : Object[]) : boolean
        + {static} html(boolean: String) : String
        + {static} menu(paneles : Paneles[]) : JPopupMenu
        + {static} saveFile(isImage : boolean) : File
        + {static} saveFile(isImage : boolean, name : String) : File
        + {static} createImageOf(component : Component) : RenderedImage
        + {static} code(code : String, name : String) : String
    }
}
package main #DDDDDD {
    class Main {
        + {static} main(args : String[]) : void
    }
}
package tools #DDDDDD {
    enum Fuentes {
        UBUNTU_LIGHT_12
        UBUNTU_LIGHT_14
        UBUNTU_LIGHT_15
        UBUNTU_LIGHT_50
        UBUNTU_LIGHT_20
        UBUNTU_LIGHT_30
        UBUNTU_LIGHT_B_30
        UBUNTU_LIGHT_40
        UBUNTU_LIGHT_B_118
        PURISA_18
        PURISA_22
        DIALOG_35
        SEGOE_UI_SYMBOL_22
        UBUNTU_MONO_15
        - font : Font
        --
        Fuentes(font : Font)
        --
        + getFont() : Font
    }
    class FuentesModificadas {
        - font : Font
        --
        # FuentesModificadas(path : String)
        --
        # getFont(style : int, size : int) : Font
    }
    interface Acciones {
        iteracion0() : void
        iteracion1() : void
        clean() : void
    }
    abstract class Archivos {
        + {static} image(path : String, width : int, height : int) : ImageIcon
        + {static} codefiles(path : String) : String
        + {static} exportImage(file : File, image : RenderedImage) : String
        + {static} exportCode(file : File, text : String) : String
    }
    enum Colour {
         AZUL
         AMARILLO
         BLANCO
         MORADO
         NARANJA
         VERDE
         AZUL_TITLE
         AZUL_TEXT
         BLANCO_OPACO
         GRIS_PANEL
         GRIS_BUTTON
         CURIOUS_BLUE
         NEGRO_EDITOR
         NEGRO_INDICE
         BORDE_SCROLL
         SCROLL_DRAGGING
         SCROLL_ROLLOVER
         SCROLL_PRESSED
         GRAY_DISABLED
         VERDE_ACTIVO
         BLANCO_DESHABILITADO
         RED_LINE_SELECTED
         LINE_FOREGROUND
         - color : Color
         --
         Colour(color : Color)
         --
         + getColor() : Color
    }
    enum Paneles {
        PRINCIPAL
        TDA
        MODULARIDAD
        RECURSIVIDAD
        ARREGLOS
        NODOS
        ORDENAMIENTO
        BUSQUEDA
        PILAS
        COLAS
        LISTAS_ENLAZADAS
        ARBOLES
        GRAFOS
        DEMOSTRACION_MODULARIDAD
        EJERCICIOS_RECURSIVIDAD
        SIMULADOR_TDA
        FACTORIAL
        POTENCIA
        - n: String
        --
        Paneles(n : String)
        --
        + toString() : String
    }
    enum Operacion {
        FACTORIAL
        POTENCIA
    }
    abstract class Operaciones {
        - {static} format : HashMap<Operacion,DecimalFormat>
        + {static} addFormat(key : Operacion, pattern : String) : void
        + {static} formatNumber(number : Object, operacion : Operacion) : String
        + {static} operacion(operacion : String, resultado : String) : String
        + {static} factorial(n : int) : long
        + {static} productoFactorial(i : int) : String
        + {static} productoFactorial(i : int, valor : int) : String
        + {static} productUpFactorial(i : int, factorial : int) : String
        + {static} exponente(base : Object, exponente : Object) : String
        + {static} potencia(base : Object, exponente : Object) : long
        + {static} productoPotencia(base : int, exponente : int) : String
        + {static} productoPotenciaUp(base : Object, exponente : Object) : String
        + {static} productoPotenciaUpN(base : Object, exponente : Object) : String
    }
    abstract class Constrains {
        + {static} addComp(component : Component,container : Container, rectangle : Rectangle, weightx : double, weighty : double, insets Insets, place : int, stretch : int) : void
        + {static} addCompX(component : Component,container : Container, rectangle : Rectangle, weightx : double, insets Insets, place : int, stretch : int) : void
        + {static} addCompY(component : Component,container : Container, rectangle : Rectangle, weighty : double, insets Insets, place : int, stretch : int) : void
        + {static} addCompI(component : Component,container : Container, rectangle : Rectangle, weightx : double, weighty : double, insets Insets, ipadx : int, ipady : int, place : int, stretch : int) : void
        + {static} addCompIx(component : Component,container : Container, rectangle : Rectangle, weightx : double, weighty : double, insets Insets, ipadx : int, place : int, stretch : int) : void
        + {static} addCompIy(component : Component,container : Container, rectangle : Rectangle, weightx : double, weighty : double, insets Insets, ipadx : int, place : int, stretch : int) : void
        + {static} addCompXIx(component : Component,container : Container, rectangle : Rectangle, weightx : double, insets Insets, ipadx : int, place : int, stretch : int) : void
        + {static} addCompYIx(component : Component,container : Container, rectangle : Rectangle, weighty : double, insets Insets, ipadx : int, place : int, stretch : int) : void
        + {static} addCompXIy(component : Component,container : Container, rectangle : Rectangle, weightx : double, insets Insets, ipady : int, place : int, stretch : int) : void
        + {static} addCompYIy(component : Component,container : Container, rectangle : Rectangle, weighty : double, insets Insets, ipady : int, place : int, stretch : int) : void
        - {static} grid(r : Rectangle, insets : Insets, place : int, stretch : int) : GridBagConstrains
    }
    enum Text {
        VENTANAPRINCIPAL
        TDA
        TDA1
        TDA2
        TDA3
        FORMULATDA
        SIMULADORTDA1
        SIMULADORTDA2
        SIMULADORTDA3
        SIMULADORTDA4
        ABOUT
        LINK
        MODULARIDAD
        MODULARIDAD1
        RECURSIVIDAD
        RECURSIVIDAD1
        ARREGLOS
        ARREGLOS1
        ARREGLOS2
        NODOS
        NODOS1
        NODOS2
        FACTORIAL
        FACTORIAL1
        FACTORIAL2
        FACTORIAL3
        FACTORIAL4
        FACTORIAL5
        FACTORIAL6
        FACTORIAL7
        POTENCIA
        POTENCIA1
        POTENCIA2
        POTENCIA3
        POTENCIA4
        POTENCIA5
        POTENCIA6
        POTENCIA7
        POTENCIA8
        DEMOSTRACION_MODULARIDAD
        - n : String
        --
        Text(n : String)
        --
        + toString() : String
    }
}
package gui #DDDDDD {
    package contenido #DDDDDD {
        package scroll #DDDDDD {
            class InvisibleScrollBarButton {
                InvisibleScrollBarButton()
            }
            class ModernScrollBarUI {
                - sp : ModernScrollPane
                --
                # ModernScrollBarUI(sp : ModernScrollPane)
                --
                # createDecreaseButton(orientation : int) : JButton
                # createIncreaseButton(orientation : int) : JButton
                # paintThumb(g : Graphics, c : Component, thumbBounds : Rectangle) : void
                # setThumbBounds(x : int, y : int, width : int, height : int) : void

            }
            class ModernScrollPane {
                # {static} THUMB_SIZE : int
                - {static} SB_THUMB_SIZE : int
                --
                + ModernScrollPane(view : Component)
                + ModernScrollPane(view : Component, area : JPanel)
                + ModernScrollPane(view : Component, vsb : int, hsb : int)
                --
                - isVerticalScrollBarfNecessary() : boolean
                - isHorizontalScrollBarNecessary() : boolean
                # getView() : Component
                # getIndice() : Component
            }
        }
        class About {
            + {static} show : boolean
            --
            + About(component : Component)
            --
            - init() : void
            - exit() : void
        }
        class Boton {
            + Boton(text : String, tip : String, icon : ImageIcon, menu : JPopupMenu, adapter : MouseAdapter)
            + Boton(tip : String, icon : ImageIcon, adapter : MouseAdapter)
            + Boton(icon : ImageIcon)
            + Boton(icon : ImageIcon, menu : JPopupMenu)
            + Boton(icon : ImageIcon, text : String, adapter : MouseAdapter)
            --
            - init(adapter : MouseAdapter) : void
        }
        class ButtonSimulador {
            + ButtonSimulador(text : String, enable : boolean, listener : ActionListener)
        }
        class Contenido {
            - contenido : JPanel
            - title : JLabel
            - pane : ModernScrollPane
            --
            + Contenido()
            --
            - init() : void
            + getContenido() : JPanel
            + getTitle() : JLabel
        }
        class Demostracion {
            - image : JLabel
            - texto : Texto
            - botones : JPanel
            --
            + Demostracion(path : String)
            --
            - init() : void
            + nextPanel() : void
            + setBotones(buttons : JButton[]) : void
            + setTexto(text : String) : void
            +setIcon(path : String) : void
        }
        class Ejercicios {
            - botones : Boton[]
            - texto : Texto
            - panel: JPanel
            --
            + Ejercicios()
            --
            - init() : void
            - items() : void
            + getBotones : Boton[]
            + setBotones(botones : Boton[]) : void
            + getTexto() : Texto
        }
        class Lienzo {
            - lienzo : boolean
            - acciones : Acciones
            - back : Boton
            - home : Boton
            - next : Boton
            --
            + Lienzo()
            + Lienzo(lienzo : boolean)
            + Lienzo(manager : LayoutManager, lienzo : boolean)
            --
            - init() : void
            + back(toolTipText : String, paneles : Paneles) : void
            + next(toolTipText : String, paneles : Paneles) : void
            + getBack() : Boton
            + getHome() : Boton
            + getNext() : Boton
            # getAcciones() : Acciones
            + setAcciones(acciones : Acciones) : void
            + paint(g : Graphics) : void
        }
        class Message {
            - message : String
            --
            + Message(message : String, component : Component)
            --
            - init() : void
        }
        class Save {
            - isImage : boolean
            --
            + Save(isImage : boolean)
            --
            + getFile() : File
        }
        class Switch {
            - modificable : boolean
            - text : String
            - onOff : boolean
            - backgroundColor : Color
            - buttonColor : Color
            - DISABLED_COMPONENT_Color : Color
            --
            + Switch(text : String, onOff : boolean)
            --
            + isOnOff() : boolean
            + setOnOff(onOff : boolean) : void
            + getBackgroundColor() : Color
            + setBackgroundColor(backgroundColor : Color) : void
            + getButtonColor() : Color
            + setButtonColor(buttonColor : Color) : void
            + isModificable() : boolean
            + setModificable(modificable : boolean) : void
            + getText() : String
            + setText(text : String) : void
            - opaque1(g2 : Graphics2D) : void
            - enable1(g2 : Graphics2D) : void
            - estado(g2 : Graphics2D) : void
            # paintComponent(g : Graphics) : void
        }
        class Texto {
            + Texto()
            + Texto(text : String)
            + Texto(text : String, rows : int, columns : int)
            + Texto(rows : int, columns : int)
            - init() : void
        }
        class TextPane {
            + TextPane(opaque : boolean)
            + TextPane()
            --
            + append(n : String, font : Font) : void
            + append(n: String, color : Color) : void
        }
        class Tree {
            - node : DefaultMutableTreeNode
            --
            + Tree(node : DefaultMutableTreeNode)
            + Tree(dato : Dato)
            --
            + getDato(index : int) : Dato
            + addNode(node : DefaultMutableTreeNode) : void
            + expandNode(row : int) : void
        }
    }
    package editor #DDDDDD {
        class Editor {
            - name : String
            --
            - Editor(view : View, indice : Indice)
            --
            - text(n : String) : void
            + drawLineIn(i : int) : void
            + drawLineIn(lineaIndice : int, lineaEditor : int) : void
            + setLine(line : boolean) : void
            + setText(text : String) : void
            - menuCode() : JPopupMenu
            + getName() : String
            + setName(name : String) : void
            + {static} editor(path : String) : Editor
        }
        class Indice {
            - {static} HEIGHT : int
            - component : JTextComponent
            - minimumDisplayDigits : int
            - lineForeground : int
            - lastDigits : int
            - lastHeight : int
            - insets : Insets
            - fonts : HashMap<String, FontMetrics>
            --
            Indice(component : JTextComponent)
            - Indice(component : JTextComponent, minimumDisplayDigits : int)
            --
            + lineForegroundIn(i : int) : void
            - documentChanged()
            - setMinimumDisplayDigits(minimumDisplayDigits : int) : void
            - setPreferredWidth() : void
            - getTextLineNumber(rowStartOffset : int) : String
            - getOffsetX(stringWidth : int) : int
            - getOffsetY(rowStartOffset : int, metrics : FontMetrics) : int
            + paintComponent(g : Graphics) : void
        }
        class View {
            - line: boolean
            - lineaSelected : int
            --
            + View()
            --
            + setLine(line : boolean) : void
            + drawLineIn(lineaSelected : int) : void
            - drawLine(g2 : Graphics2D) : void
            # paintComponent(g : Graphics) : void
        }
    }
    package principal #DDDDDD {
        class Contenedor {
            + {static} paneles : HashMap<Paneles, Lienzo>
            + {static} panelActivo : Paneles
            Contenedor()
            --
            - init() : void
            - principal() : Lienzo
            - tda() : Contenido
            - modularidad() : Contenido
            - pilas() : Contenido
            - recursividad() : Contenido
            - ordenamiento() : Contenido
            - nodos() : Contenido
            - listas() : Contenido
            - grafos() : Contenido
            - colas() : Contenido
            - busqueda() : Contenido
            - arreglos() : Contenido
            - arboles() : Contenido
            - ejerciciosRecursividad() : Ejercicios
            - simuladorTda() : Simulador
            - factorial() : Recursividad
            - potencia() : Recursividad
            - demoModularidad() : Demostracion
        }
        class Desktop {
            + Desktop()
        }
    }
    package simulador #DDDDDD {
        package lienzos #DDDDDD {
            class Graficador {
                - graficar : boolean
                - punto : Point
                - axis : Point
                --
                + Graficador()
                --
                + graficar(x : int, y : int) : void
                + coordenadas() : String
                + limpiar() : void
                - halfScreenWidth() : int
                - halfScreenHeight() : int
                - positionX(cuadrante : boolean) : int
                - positionY(cuadrante : boolean) : int
                - graficarCoordenada(g2 : Graphics2D, point : Point) : void
                - eje(g2 : Graphics2D) : void
                - puntoCoordenadaX(point : Point, x : int, j : int) : void
                - puntoCoordenadaY(point : Point, y : int, i : int) : void
                - puntoCoordenadas(point : Point, x : int, y : int, i : int, j : int) : void
                - valoresAxisXY(g2 : Graphics2D, point Point) : void
                - axisXY(g2 : Graphics2D, point : Point, i : int, j : int) : void
                - number(g2 : Graphics2D, i : int, j : int) : void
                - posicion(expr : boolean, a : int, b : int) : int
                - axis(g2 : Graphics2D, i : int, j : int) : void
                - axisZero(point : Point, i : int, j : int) : void
                + paintComponent(g: Graphics) : void
            }
        }
        class Dato {
            - tipoDato : String
            - variable : String
            - valor : String
            - hash : boolean
            --
            + Dato(tipoDato : String, variable : String, valor : String)
            + Dato(tipoDato : String, variable : String, valor : String, hash : boolean)
            --
            + getTipoDato() : String
            + setTipoDato(tipoDato : String) : void
            + getVariable() : String
            + setValor(valor: String) : void
            + getValor() : String
            + setVariable(variable : String) : void
            + isHash() : boolean
            + setHash(hash : boolean) : void
            - hashGenerator() : String
            - hashHex() : String
            + toString() : String
        }
        abstract class Recursividad {
            - valor : int
            - decremento : boolean
            - number : JLabel
            - producto : JLabel
            --
            + Recursividad(title : String, components : JComponent[])
            --
            + isDecremento() : boolean
            + setDecremento(decremento : boolean) : void
            + getProducto() : JLabel
            + setProducto(producto : String) : void
            + getNumber() : JLabel
            + setNumber(number : String) : void
            - acomodamientoProducto() : void
            # {abstract} casoTerminal(dato : int) : void
            # {abstract} casoDecrementativo(dato : int) : void
            # {abstract} casoIncrementativo(dato : int) : void
            # {abstract} casoBase(dato : int, found : boolean) : void
            # {abstract} lines() : Lines[]
            # {abstract} isCasoBase() : boolean
            # {abstract} accionesCasoBase(code : boolean) : void
            # {abstract} accionesCasoTerminal(code : boolean) : void
            # {abstract} accionesCasoIncrementativo(code : boolean) : void
            # {abstract} accionesCasoDecrementativo(code : boolean) : void
            # acomodamientoPanelControl(title : String, components : JComponent[]) : void
            + iteracion1() : void
        }
        abstract class Simulador {
            - iteracion : Integer
            - lienzo : JComponent
            - datos : JPanel
            - control: JPanel
            - codigos : JTabbedPane
            - clean : ButtonSimulador
            - nextIteracion : ButtonSimulador
            - send : ButtonSimulador
            - codigo : Switch
            - pause : Switch
            - texto : Texto
            + {static} canvasSize : Dimension
            --
            + Simulador(title : String, components : JComponent[])
            + Simulador(lienzo : JComponent, title : String, components : JComponent[])
            --
            - init() : void
            + cleanComponents() : void
            # {abstract} acomodamientoPanelControl(title : String, components : JComponent[]) : void
            # componentRegistro(title : String, components : JComponent[]) : Box
            + addCodes(editor : Editor) : void
            + setTexto(texto : String) : void
            + setDatos(trees : Tree[]) : void
            - sizeTree(length : int) : int
            - menuLienzo() : JPopupMenu
            + getTexto() : Texto
            # getControl() : JPanel
            + getLienzo() : JComponent
            + getCodigos() : JTabbedPane
            + getIteracion() : int
            - setIteracion(iteracion : Integer) : void
            + incrementIteracion() : void
            + decrementIteracion() : void
            + getPause() : Switch
            + getCodigo() : Switch
            + getSend() : ButtonSimulador
            + getClean() : ButtonSimulador
            + getNextIteracion() : ButtonSimulador
        }
    }
}
package hilos #DDDDDD {
    class Imagen {
        - stop : boolean
        - pause : boolean
        - sleep : int
        - images : ImageIcon[]
        - label : JLabel
        --
        + Imagen(label : JLabel, images : ImageIcon[])
        + Imagen(label : JLabel, sleep : int, images : ImageIcon)
        + pausar() : void
        + reiniciar() : void
        + parar() : void
        + run() : void
    }
    class LineLocation {
        - code : int
        - lineaIndice : int
        - lineaEditor : int
        - texto : String
        - scroll : int
        - sleep : boolean
        --
        + LineLocation(code : int, lineaIndice : int, lineaEditor : int, texto : String)
        + LineLocation(code : int, lineaIndice : int, lineaEditor : int, texto : String, sleep : boolean)
        + LineLocation(code : int, line : int, texto : String, sleep : boolean)
        + LineLocation(code : int, line : int, texto : String)
        - LineLocation(code : int, lineaIndice : int, lineaEditor : int, texto : String, scroll : int, sleep : boolean)
        --
        + getCode() : int
        + setCode(code: int) : void
        + getLineIndice() : int
        + getLineEditor() : int
        + getTexto() : String
        + getScroll() : int
        + isSleep() : boolean
        + toString() : String
    }
    abstract class Lines {
        - simulador : Simulador
        - lines : LineLocation[]
        --
        + Lines(simulador : Simulador, lines : LineLocation[])
        --
        + run() : void
        - lines() : void
        + {abstract} actions() : void
    }
}

About <.. Eventos

Acciones <.. Demostracion
Acciones <.. Lienzo
Acciones <.. Contenedor
Acciones <.. Ejercicios
Acciones <.. Contenido
Acciones <|.. Recursividad

Archivos <.. Demostracion
Archivos <.. Desktop
Archivos <.. About
Archivos <.. Contenedor
Archivos <.. Editor
Archivos <.. Lienzo
Archivos <.. Tree
Archivos <.. Message

Boton <.. Ejercicios
Boton <.. Contenedor
Boton <.. Lienzo

ButtonSimulador <.. Simulador

Colour <.. Switch
Colour <.. Indice
Colour <.. View
Colour <.. ButtonSimulador
Colour <.. Texto
Colour <.. TextPane
Colour <.. About
Colour <.. ModernScrollBarUI
Colour <.. Message
Colour <.. Simulador

Contenedor <.. Desktop
Contenedor <.. Eventos
Contenedor "1" o--> "1" Paneles
Contenedor "1" o--> "*" Paneles
Contenedor "1" o--> "*" Lienzo

Contenido "1" o--> "1" ModernScrollPane
Contenido <.. Contenedor

Constrains <.. Contenedor
Constrains <.. Demostracion
Constrains <.. About
Constrains <.. Simulador
Constrains <.. Ejercicios
Constrains <.. Contenido
Constrains <.. Recursividad

Ejercicios "1" o--> "*" Boton
Ejercicios "1" o--> "1" Texto
Ejercicios <.. Contenedor

Dato <.. Tree
Dato <.. Contenedor

Demostracion <.. Contenedor
Demostracion "1" o--> "1" Texto

Desktop <.. Main

Editor <.. Contenedor
Editor <.. Lines
Editor <.. Simulador

Eventos <.. Contenido
Eventos <.. Lienzo
Eventos <.. About
Eventos <.. Simulador
Eventos <.. Contenedor
Eventos <.. Lines
Eventos <.. Operaciones

Fuentes <.. Contenedor
Fuentes <.. ButtonSimulador
Fuentes <.. Texto
Fuentes <.. TextPane
Fuentes <.. Boton
Fuentes <.. Switch
Fuentes <.. About
Fuentes <.. Tree
Fuentes <.. Contenido
Fuentes <- Graficador
Fuentes <.. Message

FuentesModificadas <.. Fuentes

Graficador <.. Contenedor

Indice <.. Editor

InvisibleScrollBarButton <.. ModernScrollBarUI

Lienzo "1" o--> "1" Boton
Lienzo "1" o--> "1" Acciones
Lienzo <.. Contenido
Lienzo <.. Demostracion
Lienzo <.. Simulador
Lienzo <.. Ejercicios
Lienzo <.. Contenedor
Lienzo <.. Recursividad
Lienzo <|-- Contenido
Lienzo <|-- Demostracion
Lienzo <|-- Simulador
Lienzo <|-- Ejercicios

Lines "1" o--> "*" LineLocation
Lines "1" o--> "1" Simulador
Lines <.. Contenedor
Lines <.. Recursividad

LineLocation <.. Lines
LineLocation <.. Contenedor

Message <.. Editor
Message <.. Simulador

ModernScrollBarUI <.. ModernScrollPane
ModernScrollBarUI "1" o--> "1"  ModernScrollPane
ModernScrollBarUI +-- InvisibleScrollBarButton

ModernScrollPane <|-- Editor
ModernScrollPane <.. ModernScrollBarUI
ModernScrollPane <.. Eventos
ModernScrollPane <.. Contenido
ModernScrollPane <.. Editor
ModernScrollPane <.. Simulador

Paneles <.. Eventos
Paneles <.. Contenedor
Paneles <.. Lienzo
Paneles <.. Contenido

Operacion <.. Operaciones
Operacion <.. Contenedor

Operaciones +-- Operacion
Operaciones <.. Contenedor
Operaciones "1" o--> "*" Operacion

Save <.. Eventos

Tree <.. Eventos
Tree <.. Simulador
Tree <.. Contenedor

View <.. Editor

TextPane <|-- View
TextPane <.. View
TextPane <.. Contenedor

Texto <.. Demostracion
Texto <.. Ejercicios
Texto <.. Simulador
Texto <.. Contenedor
Texto <.. About

Simulador "1" o--> "1" ButtonSimulador
Simulador "1" o--> "1" Switch
Simulador "1" o--> "1" Texto
Simulador <.. Lines
Simulador <.. Contenedor
Simulador <.. Graficador
Simulador <.. Recursividad
Simulador <|-- Recursividad

Switch <.. Simulador
Switch <.. Eventos

Text <.. About
Text <.. Contenedor
Text <.. Lienzo

Recursividad <.. Contenedor
@enduml